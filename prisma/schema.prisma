datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
    binaryTargets   = ["native", "debian-openssl-1.1.x", "linux-musl", "darwin"]
}

// Define the data model
model Album {
    AlbumId  Int     @id @default(autoincrement())
    Title    String
    ArtistId Int
    Artist   Artist  @relation(fields: [ArtistId], references: [ArtistId])
    // Define any other fields or relationships specific to the Album table
    Track    Track[]
}

model Artist {
    ArtistId Int     @id @default(autoincrement())
    Name     String?
    Albums   Album[] // Define the reverse relationship to Album
}

model Customer {
    CustomerId   Int       @id @default(autoincrement())
    FirstName    String
    LastName     String
    Company      String?
    Address      String?
    City         String?
    State        String?
    Country      String?
    PostalCode   String?
    Phone        String?
    Fax          String?
    Email        String
    SupportRepId Int?
    SupportRep   Employee? @relation("CustomerToEmployee", fields: [SupportRepId], references: [EmployeeId])
    // Define any other fields or relationships specific to the Customer table
    Invoice      Invoice[]
}

model Employee {
    EmployeeId   Int        @id @default(autoincrement())
    LastName     String
    FirstName    String
    Title        String?
    ReportsTo    Int?
    BirthDate    DateTime?
    HireDate     DateTime?
    Address      String?
    City         String?
    State        String?
    Country      String?
    PostalCode   String?
    Phone        String?
    Fax          String?
    Email        String?
    Subordinates Employee[] @relation("SubordinatesToManager")
    Manager      Employee?  @relation("SubordinatesToManager", fields: [ReportsTo], references: [EmployeeId])
    Customers    Customer[] @relation("CustomerToEmployee")
    // Define any other fields or relationships specific to the Employee table
}

model Genre {
    GenreId Int     @id @default(autoincrement())
    Name    String?
    // Define any other fields or relationships specific to the Genre table
    Track   Track[]
}

model Invoice {
    InvoiceId         Int           @id @default(autoincrement())
    CustomerId        Int
    InvoiceDate       DateTime
    BillingAddress    String?
    BillingCity       String?
    BillingState      String?
    BillingCountry    String?
    BillingPostalCode String?
    Total             Float
    Customer          Customer      @relation(fields: [CustomerId], references: [CustomerId])
    InvoiceLines      InvoiceLine[]
    // Define any other fields or relationships specific to the Invoice table
}

model InvoiceLine {
    InvoiceLineId Int     @id @default(autoincrement())
    InvoiceId     Int
    TrackId       Int
    UnitPrice     Float
    Quantity      Int
    Invoice       Invoice @relation(fields: [InvoiceId], references: [InvoiceId])
    Track         Track   @relation(fields: [TrackId], references: [TrackId])
    // Define any other fields or relationships specific to the InvoiceLine table
}

model MediaType {
    MediaTypeId Int     @id @default(autoincrement())
    Name        String?
    // Define any other fields or relationships specific to the MediaType table
    Track       Track[]
}

model Playlist {
    PlaylistId    Int             @id @default(autoincrement())
    Name          String?
    // Define any other fields or relationships specific to the Playlist table
    PlaylistTrack PlaylistTrack[]
}

model PlaylistTrack {
    PlaylistTrackId Int      @id @default(autoincrement())
    PlaylistId      Int
    TrackId         Int
    Playlist        Playlist @relation(fields: [PlaylistId], references: [PlaylistId])
    Track           Track    @relation(fields: [TrackId], references: [TrackId])
    // Define any other fields or relationships specific to the PlaylistTrack table
}

model Track {
    TrackId      Int             @id @default(autoincrement())
    Name         String
    AlbumId      Int?
    MediaTypeId  Int
    GenreId      Int?
    Composer     String?
    Milliseconds Int
    Bytes        Int?
    UnitPrice    Float
    Album        Album?          @relation(fields: [AlbumId], references: [AlbumId])
    Genre        Genre?          @relation(fields: [GenreId], references: [GenreId])
    MediaType    MediaType       @relation(fields: [MediaTypeId], references: [MediaTypeId])
    InvoiceLines InvoiceLine[]
    Playlists    PlaylistTrack[]
    // Define any other fields or relationships specific to the Track table
}
